@page "/ordersummary"
@using BlazorSportStoreAuth.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using BlazorSportStoreAuth.Interfaces
@inject IProductOrderInfo OrderInfoService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h3>Order Summary</h3>

@if (isLoading)
{
    <p>Loading your orders...</p>
}
else if (orderInfos != null && orderInfos.Any())
{
    <table class="table is-striped is-bordered mt-2 is-fullwidth">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Order Date</th>
                <th>Status</th>
                <th>Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orderInfos)
            {
                <tr>
                    <td>@order.order_id</td>
                    <td>@order.OrderDate</td>
                    <td>@order.Status</td>
                    <td><i class="bi bi-currency-dollar"></i>@order.Total.ToString("N2")</td>
                    <td>
                        <button class="btn-primary" @onclick="() => ViewOrderDetails(order.order_id)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No orders found for your account.</p>
}

<style>
    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        .table th {
            background-color: #f4f4f4;
        }

    .btn-primary {
        background-color: #007bff;
        border: none;
        padding: 6px 12px;
        font-size: 14px;
        border-radius: 5px;
        color: white;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>

@code {
    private List<ProductOrderInfo> orderInfos = new();
    private string userEmail = "";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersForUser();
    }

    private async Task LoadOrdersForUser()
    {
        try
        {
            userEmail = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "userEmail");
            if (string.IsNullOrEmpty(userEmail))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // ✅ Fetch only the user's orders via API
            orderInfos = await OrderInfoService.GetOrdersByUserEmail(userEmail);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error fetching order data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewOrderDetails(string orderId)
    {
        NavigationManager.NavigateTo($"/ordersummary/{orderId}");
    }
}
